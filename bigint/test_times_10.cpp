// bigint Test Program
//
// Tests:  times_10, uses ==
//
// NEED TO IMPLEMENT
// 
#include <iostream>
#include <cassert>
#include "bigint.hpp"

//===========================================================================
int main () {
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi(3);

        // Test 
        bi = bi.times10(0);

        // Verify
        assert(bi == 3);
        std::cout << "3 * 10^0 = " << bi << std::endl;
        std::cout << std::endl;
    }

    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi(234);

        // Test 
        bi = bi.times10(2);

        // Verify
        assert(bi == 23400);
        std::cout << "234 * 10^2 = " << bi << std::endl;
        std::cout << std::endl;
    }

    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi(5678);

        // Test 
        bi = bi.times10(3);

        // Verify
        assert(bi == 5678000);
        std::cout << "5678 * 10^3 = " << bi << std::endl;
        std::cout << std::endl;
    }

{
        //------------------------------------------------------
        // Setup fixture
        bigint bi(215678);

        // Test 
        bi = bi.times10(3);

        // Verify
        assert(bi == 215678000);
        std::cout << "215678 * 10^3 = " << bi << std::endl;
        std::cout << std::endl;
    }

    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi("1234567891098765432177889911223344556600000000000123456789109876543217788991122334455660000000000012345678910987654321778899112233445566000000000001234567891098765432177889911223344556600000000000");
        
        // Test 
        bi = bi.times10(3);
        
        // Verify
        assert(bi == "1234567891098765432177889911223344556600000000000123456789109876543217788991122334455660000000000012345678910987654321778899112233445566000000000001234567891098765432177889911223344556600000000000000");

        std::cout << "1234567891098765432177889911223344556600000000000123456789109876543217788991122334455660000000000012345678910987654321778899112233445566000000000001234567891098765432177889911223344556600000000000 * 10^3 = " << bi << std::endl;
        std::cout << std::endl;
    }

    {
        bigint bi("11215678337788991122334455566778899000000000000000000022334455667788991100012345678910009988776655443322117788994455661122334455669999999999999999999999999999999999991234567891000998877665544332211");

        bi = bi.times10(2);

        assert(bi == "1121567833778899112233445556677889900000000000000000002233445566778899110001234567891000998877665544332211778899445566112233445566999999999999999999999999999999999999123456789100099887766554433221100");

        std::cout << "11215678337788991122334455566778899000000000000000000022334455667788991100012345678910009988776655443322117788994455661122334455669999999999999999999999999999999999991234567891000998877665544332211 * 10^2 = " << bi << std::endl;
        std::cout << std::endl;
    }
    //Add test cases as needed.

    std::cout << "Done testing times_10" << std::endl;
    std::cout << std::endl;
    return 0;
}


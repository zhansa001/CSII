<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="bigint.cpp"><comment type="line">//bigint functions</comment>
<comment type="line">//Sandy Zhang</comment>
<comment type="line">//Due date: September 16, 2024</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bigint.hpp"</cpp:file></cpp:include>

<comment type="line">//Milestone 1</comment>
<constructor><name><name>bigint</name><operator>::</operator><name>bigint</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CAPACITY</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>SIZE</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></constructor>

<constructor><name><name>bigint</name><operator>::</operator><name>bigint</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <member_init_list>:<call><name>bigint</name><argument_list>()</argument_list></call> </member_init_list><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>number</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><name>value</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>CAPACITY</name></expr>)</condition> <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>number</name> <operator>=</operator> <name>value</name> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>SIZE</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>number</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <name>value</name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CAPACITY</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>SIZE</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></constructor>

<constructor><name><name>bigint</name><operator>::</operator><name>bigint</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>value</name><index>[]</index></name></decl></parameter>)</parameter_list> <member_init_list>:<call><name>bigint</name><argument_list>()</argument_list></call> </member_init_list><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name><name>value</name><index>[<expr><name>length</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>++</operator><name>length</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>length</name></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
         <expr_stmt><expr><name><name>SIZE</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>int</name><argument_list>(<argument><expr><name><name>value</name><index>[<expr><name>i</name><operator>-</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>int</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>--</operator><name>length</name></expr>;</expr_stmt>
   </block_content>}</block></for>
</block_content>}</block></constructor>
 
<function><type><name>void</name></type> <name><name>bigint</name><operator>::</operator><name>debugPrint</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>stream</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>CAPACITY</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <name><name>SIZE</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">"|"</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function type="operator"><type><name>bool</name></type> <name><name>bigint</name><operator>::</operator><name>operator<name>==</name></name></name><parameter_list>(<parameter><decl><type><name>bigint</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CAPACITY</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>SIZE</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>rhs</name><operator>.</operator><name>SIZE</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
   
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function type="operator"><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>bigint</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>CAPACITY</name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name><name>value</name><operator>.</operator><name>SIZE</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <decl_stmt><decl><type><name>int</name></type> <name>iCap</name> <init>= <expr><name>i</name> <operator>-</operator> <literal type="number">80</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <literal type="string">"0"</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">80</literal></expr>)</condition> <block>{<block_content>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <name>iCap</name></expr>;</condition> <incr><expr><operator>--</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <name><name>value</name><operator>.</operator><name>SIZE</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for> 

        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>iCap</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <name><name>value</name><operator>.</operator><name>SIZE</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <name><name>value</name><operator>.</operator><name>SIZE</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>stream</name></expr>;</return>
</block_content>}</block></function>
<comment type="line">//Milestone 2</comment>

<function type="operator"><type><name><name>std</name><operator>::</operator><name>istream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name> <parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>istream</name></name><modifier>&amp;</modifier></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>bigint</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>bigint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>CAPACITY</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    
    <while>while<condition>(<expr><name>stream</name> <operator>&gt;&gt;</operator> <name>ch</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>s</name><index>[<expr><name>length</name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>length</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>bigint</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>stream</name></expr>;</return>
</block_content>}</block></function>

<function type="operator"><type><name>bigint</name></type> <name><name>bigint</name><operator>::</operator><name>operator<name>+</name></name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <decl_stmt><decl><type><name>bigint</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CAPACITY</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>SIZE</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>SIZE</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>rhs</name><operator>.</operator><name>SIZE</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name><name>result</name><operator>.</operator><name>SIZE</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>result</name><operator>.</operator><name>SIZE</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>SIZE</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function type="operator"><type><name>int</name></type> <name><name>bigint</name><operator>::</operator><name>operator<name>[]</name></name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>digit</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>digit</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>digit</name> <operator>&lt;</operator> <name>CAPACITY</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>SIZE</name><index>[<expr><name>digit</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">//Milestone 3</comment>

<function><type><name>bigint</name></type> <name><name>bigint</name><operator>::</operator><name>timesDigit</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <decl_stmt><decl><type><name>bigint</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CAPACITY</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>SIZE</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>SIZE</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>rhs</name> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>carry</name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>SIZE</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt> 
        <if_stmt><if>if<condition>(<expr><name><name>result</name><operator>.</operator><name>SIZE</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>result</name><operator>.</operator><name>SIZE</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>SIZE</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bigint</name></type> <name><name>bigint</name><operator>::</operator><name>times10</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <decl_stmt><decl><type><name>bigint</name></type> <name>result</name></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>CAPACITY</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>SIZE</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>SIZE</name><index>[<expr><name>i</name> <operator>-</operator> <name>rhs</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>rhs</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>SIZE</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function type="operator"><type><name>bigint</name></type> <name><name>bigint</name><operator>::</operator><name>operator<name>*</name></name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <decl_stmt><decl><type><name>bigint</name></type> <name>temp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bigint</name></type> <name>product</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CAPACITY</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name><name>rhs</name><operator>.</operator><name>timesDigit</name></name><argument_list>(<argument><expr><name><name>SIZE</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>product</name> <operator>=</operator> <name>product</name> <operator>+</operator> <call><name><name>temp</name><operator>.</operator><name>times10</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>product</name></expr>;</return>
</block_content>}</block></function>
</unit>
